import type { Parsable } from "./parsable";
import type { ParseNode } from "./parseNode";
import type { SerializationWriter } from "./serializationWriter";
/** Defines the base interface for defining an untyped node. */
export interface UntypedNode extends Parsable {
    /**
     * Gets the value of the UntypedNode.
     */
    getValue(): any;
    /**
     * The value represented by the UntypedNode.
     */
    value?: any;
}
/**
 * Factory to create an UntypedNode from a string during deserialization.
 */
export declare function createUntypedNodeFromDiscriminatorValue(_parseNode: ParseNode | undefined): (instance?: Parsable) => Record<string, (node: ParseNode) => void>;
/**
 * Type guard to assert that an object instance is an UntypedNode.
 * @param node The object to check.
 * @return boolean indicating if the node is an UntypedNode.
 */
export declare function isUntypedNode(node: any): node is UntypedNode;
/**
 * The deserialization implementation for UntypedNode.
 */
export declare function deserializeIntoUntypedNode(untypedNode?: Partial<UntypedNode> | undefined): Record<string, (node: ParseNode) => void>;
/**
 * The serialization implementation for UntypedNode.
 */
export declare function serializeUntypedNode(_writer: SerializationWriter, _errorDetails?: Partial<UntypedNode> | undefined): void;
//# sourceMappingURL=untypedNode.d.ts.map