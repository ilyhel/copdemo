"use strict";
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const tslib_1 = require("tslib");
const customFetchHandler_1 = require("./middlewares/customFetchHandler");
const _1 = require("./");
class HttpClient {
    /**
     * @public
     * @constructor
     * Creates an instance of a HttpClient which contains the middlewares and fetch implementation for request execution.
     * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers
     * If middlewares param is undefined, the httpClient instance will use the default array of middlewares.
     * Set middlewares to `null` if you do not wish to use middlewares.
     * If custom fetch is undefined, the httpClient instance uses the `DefaultFetchHandler`
     * @param {(request: string, init?: RequestInit) => Promise < Response >} custom fetch function - a Fetch API implementation
     *
     */
    constructor(customFetch, ...middlewares) {
        this.customFetch = customFetch;
        // If no middlewares are provided, use the default ones
        middlewares = (middlewares === null || middlewares === void 0 ? void 0 : middlewares.length) && middlewares[0] ? middlewares : _1.MiddlewareFactory.getDefaultMiddlewares(customFetch);
        // If a custom fetch function is provided, add a CustomFetchHandler to the end of the middleware chain
        if (this.customFetch) {
            middlewares.push(new customFetchHandler_1.CustomFetchHandler(customFetch));
        }
        // Set the middleware chain
        this.setMiddleware(...middlewares);
    }
    /**
     * @private
     * Processes the middleware parameter passed to set this.middleware property
     * The calling function should validate if middleware is not undefined or not empty.
     * @param {...Middleware} middleware - The middleware passed
     * @returns Nothing
     */
    setMiddleware(...middleware) {
        for (let i = 0; i < middleware.length - 1; i++) {
            middleware[i].next = middleware[i + 1];
        }
        this.middleware = middleware[0];
    }
    /**
     * Executes a request and returns a promise resolving the response.
     * @param url the request url.
     * @param options request options.
     * @returns the promise resolving the response.
     */
    executeFetch(url, requestInit, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.middleware) {
                return yield this.middleware.execute(url, requestInit, requestOptions);
            }
            else if (this.customFetch) {
                return this.customFetch(url, requestInit);
            }
            throw new Error("Please provide middlewares or a custom fetch function to execute the request");
        });
    }
}
exports.HttpClient = HttpClient;
