import { isUntypedNode } from "./untypedNode";
/**
 * Type guard to assert that an object instance is an UntypedObject.
 * @param node The object to check.
 * @return boolean indicating if the node is an UntypedObject.
 */
export function isUntypedObject(node) {
    const proposedNode = node;
    return (proposedNode &&
        proposedNode.value instanceof Object &&
        proposedNode.value instanceof Array === false &&
        Object.values(proposedNode.value).every((item) => isUntypedNode(item)));
}
/**
 * Factory to create an UntypedObject from a Record<string, UntypedNode>.
 * @param value The Record<string, UntypedNode> value to create from.
 * @return The created UntypedObject.
 */
export function createUntypedObject(value) {
    return {
        value: value,
        getValue: () => value,
    };
}
//# sourceMappingURL=untypedObject.js.map